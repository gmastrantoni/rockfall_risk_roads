"""
Vulnerability Assessment Module (Binary Redesign)

This module provides a binary vulnerability assessment for road segments
based on specific road attributes.

Vulnerability is set to 0 if the roadbed type is tunnel (tr_str_sed = '03')
or the road level is underpass (tr_str_liv = '01'); otherwise, it is set to 1.
"""

import pandas as pd
import geopandas as gpd
import logging
from typing import Optional

# Set up logger
logger = logging.getLogger(__name__)


def assess_binary_vulnerability(
    road_segments: gpd.GeoDataFrame,
    roadbed_column: str,
    level_column: str,
    output_column: str
) -> gpd.GeoDataFrame:
    """
    Assign binary vulnerability to road segments:
    - 0 if roadbed type is tunnel (tr_str_sed = '03') or road level is underpass (tr_str_liv = '01')
    - 1 otherwise

    Parameters
    ----------
    road_segments : gpd.GeoDataFrame
        GeoDataFrame containing road segments
    roadbed_column : str, optional
        Column name for roadbed type, by default 'tr_str_sed'
    level_column : str, optional
        Column name for road level, by default 'tr_str_liv'
    output_column : str, optional
        Column name for binary vulnerability, by default 'vulnerability'

    Returns
    -------
    gpd.GeoDataFrame
        GeoDataFrame with added binary vulnerability column
    """
    result = road_segments.copy()
    logger.info(f"Assigning binary vulnerability to {len(result)} road segments")

    def binary_vuln(row):
        if str(row.get(roadbed_column, '')) == '03' or str(row.get(level_column, '')) == '01':
            return 0
        return 1

    result[output_column] = result.apply(binary_vuln, axis=1)
    logger.info(f"Binary vulnerability assignment complete. {result[output_column].value_counts().to_dict()}")
    return result